apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: sealights-instrumentation
spec:
  description: |
    An integration test that exercises Sealights capabilities with Python...
  params:
    - description: Snapshot of the application
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: Path to the deployment YAML file
      name: deployment-file
      default: deploy/deployment.yaml
      type: string
  tasks:
    - name: test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/flacatus/tekton-integration-catalog.git
          - name: revision
            value: sealights_build
          - name: pathInRepo
            value: common/tasks/test-metadata/0.1/test-metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: test-name
          value: $(context.pipelineRun.name)
    - name: sealights-get-refs
      runAfter:
        - test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/flacatus/tekton-integration-catalog.git
          - name: revision
            value: extract_ref
          - name: pathInRepo
            value: tasks/sealights/sealights-get-refs/0.1/sealights-get-refs.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
    - name: provision-eaas-space
      runAfter:
        - sealights-get-refs
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - provision-eaas-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        volumes:
          - name: credentials
            emptyDir: {}
        steps:
          - name: get-supported-versions
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "$(steps.get-supported-versions.results.versions[0])."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: "m5.large"
    - name: deploy
      runAfter:
        - provision-cluster
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: {}
          - name: sealights-credentials
            secret:
              secretName: sealights-credentials
        results:
          - name: BASE_URL
            description: The base URL of the deployed service
        params:
          - name: deployment-file
            type: string
            description: Path to the deployment YAML file
          - name: image
            type: string
            description: Image for the deployment container
          - name: git-url
            type: string
            description: git repo
          - name: git-branch
            type: string
            description: git branch
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: apply-deployment
            image: docker.io/bitnami/kubectl:latest
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: sealights-credentials
                mountPath: /usr/local/sealights-credentials
            workingDir: /workspace
            env:
              - name: JOB_SPEC
                value: $(tasks.test-metadata.results.job-spec)
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: BUILD_SESSION_ID
                value: $(tasks.sealights-get-refs.results.sealights-bsid)
              - name: IMAGE
                value: "$(tasks.sealights-get-refs.results.container-image)"
              - name: SL_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sealights-credentials
                    key: token
            script: |
              #!/bin/sh
              set -eux
              
              git clone "$(tasks.test-metadata.results.git-url)" -b "$(tasks.test-metadata.results.source-repo-branch)"
              cd todo-list-app

              # Create the sealights-credentials secret
              kubectl create secret generic sealights-credentials \
              --from-literal=token=$SL_TOKEN \
              --dry-run=client -o yaml | kubectl apply -f -

              export IMAGE=$IMAGE
              export BUILD_SESSION_ID=$BUILD_SESSION_ID

              # Replace placeholders in the deployment manifest with actual values
              sed -i "s|\${IMAGE}|$IMAGE|g" $(params.deployment-file)
              sed -i "s|\${BUILD_SESSION_ID}|$BUILD_SESSION_ID|g" $(params.deployment-file)

              # Apply the deployment manifest
              kubectl apply -f $(params.deployment-file)

              # Create an OpenShift route
              kubectl expose deployment todo-app --type=ClusterIP --name=todo-list-app-service
              # kubectl expose svc todo-list-app-service

              cat <<EOF | kubectl apply -f -
              apiVersion: route.openshift.io/v1
              kind: Route
              metadata:
                name: todo-list-app-route
              spec:
                to:
                  kind: Service
                  name: todo-list-app-service
                port:
                  targetPort: 5000  # Match the port the service exposes
              EOF

              # Wait for the route hostname to be available
              export ROUTE_HOST=""
              while [ -z "$ROUTE_HOST" ]; do
                ROUTE_HOST=$(kubectl get route todo-list-app-route -o jsonpath='{.spec.host}')
                sleep 10
              done

              export BASE_URL="http://${ROUTE_HOST}"
              echo "Application exposed at ${BASE_URL}"
              echo -n "${BASE_URL}" > /tekton/results/BASE_URL
      params:
        - name: deployment-file
          value: "$(params.deployment-file)"
        - name: image
          value: "$(tasks.sealights-get-refs.results.container-image)"
        - name: git-url
          value: "$(tasks.test-metadata.results.git-url)"
        - name: git-branch
          value: "$(tasks.test-metadata.results.source-repo-branch)"
    - name: run-robot-tests
      runAfter:
        - deploy
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: {}
          - name: sealights-credentials
            secret:
              secretName: sealights-credentials
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: run-robot-tests
            image: python:3.9-slim
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: sealights-credentials
                mountPath: /usr/local/sealights-credentials
            workingDir: /workspace
            env:
              - name: SL_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sealights-credentials
                    key: token
              - name: BUILD_SESSION_ID
                value: $(tasks.sealights-get-refs.results.sealights-bsid)
              - name: PYTHONPATH
                value: "/app/sealights-integration-examples/robot-custom-integration/sl_python_robot"
              - name: BASE_URL
                value: "$(tasks.deploy.results.BASE_URL)"
            script: |
              #!/bin/sh
              set -eux
              
              if [ -z "$BASE_URL" ]; then
                  echo "Error: BASE_URL is not set!"
                  exit 1
              fi

              # export PYTHONPATH="/app/sealights-integration-examples/robot-custom-integration/sl_python_robot:${PYTHONPATH:-}"
              apt-get update && apt-get install -y git && rm -rf /var/lib/apt/lists/

              git clone "$(tasks.test-metadata.results.git-url)" -b "$(tasks.test-metadata.results.source-repo-branch)"
              cd "$(tasks.test-metadata.results.git-repo)"
              pip install --no-cache-dir -r requirements.txt
              pip install --no-cache-dir -r robot_requirements.txt
              
              pip install opentelemetry-exporter-otlp-proto-grpc

              git clone https://github.com/ascerra/sealights-integration-examples.git
              pip install sealights-integration-examples/robot-custom-integration/.

              # Run robot tests
              robot --listener sealights-integration-examples/robot-custom-integration/sl_python_robot/SLListener.py:"$SL_TOKEN":"$BUILD_SESSION_ID":Robot_Tests -v BASE_URL:"$BASE_URL" tests/integration_tests.robot

